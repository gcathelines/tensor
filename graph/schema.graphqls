scalar Int64

type PowerPlant {
  "ID of the power plant"
  id: ID!
  "Name of the power plant"
  name: String!
  "Latitude in degrees"
  latitude: Float!
  "Longitude in degrees"
  longitude: Float!
  "Provided forecasts from openmeteo for the weather"
  weatherForecasts(forecastDays: Int = 7): [WeatherForecast!]!
  "Is there precipitation at the power plant today?"
  hasPrecipitationToday: Boolean!
  "Elevation of the power plant"
  elevation: Float!
}

type WeatherForecast {
  "Time of the forecast in UTC/GMT"
  time: String!
  "Temperature (2 m) in celsius"
  temperature: Float!
  "Precipitation (rain + showers + snow) in millimeter"
  precipitation: Float!
  "Wind Speed (10 m) in Km/h"
  windSpeed: Float!
  "Wind Direction (10 m) in degrees"
  windDirection: Float!
}

input CreatePowerPlantInput {
  "Name of the power plant"
  name: String!
  "Latitude in degrees"
  latitude: Float!
  "Longitude in degrees"
  longitude: Float!
}

input UpdatePowerPlantInput {
  "ID of the power plant"
  id: ID!
  "Name of the power plant"
  name: String
  "Latitude in degrees"
  latitude: Float
  "Longitude in degrees"
  longitude: Float
}


type Query {
  "Fetch a single power plant by ID"
  powerPlant(id: ID!, forecastDays: Int = 7): PowerPlant

  "Fetch a paginated list of power plants"
  powerPlants(lastID: Int64 = 0, count: Int = 10, forecastDays: Int = 7): [PowerPlant!]!
}


type Mutation {
  "Create a new power plant"
  createPowerPlant(input: CreatePowerPlantInput!): PowerPlant!

  "Update an existing power plant"
  updatePowerPlant(input: UpdatePowerPlantInput!): PowerPlant!
}